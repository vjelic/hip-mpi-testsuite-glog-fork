{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-22b6eec3-4284-4dec-b5fa-b8a52132f73a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-8b40fd5f-5cca-4aa0-b55a-b896f1970f59",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-139fc00b-7edb-4847-bc5d-018cb0e2776f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-91f4bebb-68c8-469c-8802-1c9c0552edca",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-46809b6b-51b3-4f54-8f12-941c08f792b5",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-3bb483db-25cc-4927-91a1-a30d35ac41cc",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-3fc1389e-d0fd-4cc0-843d-64aad6309adc",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-c7f2230d-a683-4b16-b467-0e65fa7ec41e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-3462ca63-6a1d-4b44-80b6-6e9352e93c14",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-7aa40d28-6d1f-49b8-b1c2-222d03f4f1e0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-97971cd8-0362-4e2a-b930-a8b19560b124",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-6dd47e86-b5f9-426b-bcb5-71ff21dfe808",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-a4514811-b3ad-4a48-9d0e-519b492ab86a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-51feea4e-cda0-4ad0-8939-a19a2bc69f03",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-c328149b-d380-4738-9b0b-277acc21a03b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-21f6e50e-3cd1-4692-b48a-fa26ecaee7ae",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f82b226f-56c9-4f8c-93e9-1f4629d22519",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2240dc5b-9762-4ac5-94f1-6e4b12fa6810",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-6a48a4c6-ee93-4020-8536-8ecb0b3ee1a4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS111237"
                ]
              }
            },
            {
              "id": "glog-2fd19285-e0ab-4761-8460-da169155ffea",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS111237"
                ]
              }
            },
            {
              "id": "glog-83755088-1d2d-40d5-b292-41442ca5514c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS111237"
                ]
              }
            },
            {
              "id": "glog-e4de1bc0-a041-454b-b0dc-01ea237ab20b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS111237"
                ]
              }
            },
            {
              "id": "glog-965479bc-43b4-48c1-a6a4-dc98fd4c2d54",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2983e4a8-4614-42f8-ae16-ab9ff9edac37",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-a8797edd-4ae8-4692-a26b-7508ae83fe69",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS111237"
                ]
              }
            },
            {
              "id": "glog-1fe88271-cd87-4071-bff7-1b83c98a3812",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-e3b0d660-256b-43fc-bee2-2c935277c66a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-63931f57-3acb-4c98-b753-f09cb2228081",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-5af94786-560d-45da-acbc-b6f6ed9d3437",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7034108e-36ad-4da3-b7b4-9313eb3576c9",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-6b5ae1e1-c193-4fb2-adb3-cd921cfb6ba2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-dfc749dd-c04c-4a4c-b1a5-86c07e8f5b82",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-7117c26e-e082-4425-b0b4-ff4fa28268c8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-c491b520-01e6-448b-b157-20c1fec5e0e2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-ac2dc4b9-cb89-42a5-ab4f-e59b847019be",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-15fb1ec5-0bf9-4165-a71e-971d831f776b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-22b6eec3-4284-4dec-b5fa-b8a52132f73a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_memkind.cc"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 28,
                  "endLine": 93,
                  "endColumn": 39,
                  "charOffset": 2791,
                  "charLength": 11,
                  "snippet": {
                    "text": "malloc(len)",
                    "rendered": {
                      "text": "malloc(len)",
                      "markdown": "`malloc(len)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_memkind.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2791,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8b40fd5f-5cca-4aa0-b55a-b896f1970f59",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_memkind.cc"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 28,
                  "endLine": 160,
                  "endColumn": 39,
                  "charOffset": 4728,
                  "charLength": 11,
                  "snippet": {
                    "text": "malloc(len)",
                    "rendered": {
                      "text": "malloc(len)",
                      "markdown": "`malloc(len)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_memkind.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4728,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-139fc00b-7edb-4847-bc5d-018cb0e2776f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_memkind.cc"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 28,
                  "endLine": 193,
                  "endColumn": 39,
                  "charOffset": 5679,
                  "charLength": 11,
                  "snippet": {
                    "text": "malloc(len)",
                    "rendered": {
                      "text": "malloc(len)",
                      "markdown": "`malloc(len)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_memkind.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5679,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-91f4bebb-68c8-469c-8802-1c9c0552edca",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_memkind.cc"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 28,
                  "endLine": 127,
                  "endColumn": 39,
                  "charOffset": 3756,
                  "charLength": 11,
                  "snippet": {
                    "text": "malloc(len)",
                    "rendered": {
                      "text": "malloc(len)",
                      "markdown": "`malloc(len)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_memkind.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3756,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-46809b6b-51b3-4f54-8f12-941c08f792b5",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_pt2pt_nb.cc"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 25,
                  "endLine": 214,
                  "endColumn": 59,
                  "charOffset": 6643,
                  "charLength": 34,
                  "snippet": {
                    "text": "malloc (2*size*sizeof(MPI_Request)",
                    "rendered": {
                      "text": "malloc (2*size*sizeof(MPI_Request)",
                      "markdown": "`malloc (2*size*sizeof(MPI_Request)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_pt2pt_nb.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6643,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3bb483db-25cc-4927-91a1-a30d35ac41cc",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_pt2pt_nb.cc"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 25,
                  "endLine": 159,
                  "endColumn": 59,
                  "charOffset": 5213,
                  "charLength": 34,
                  "snippet": {
                    "text": "malloc (2*size*sizeof(MPI_Request)",
                    "rendered": {
                      "text": "malloc (2*size*sizeof(MPI_Request)",
                      "markdown": "`malloc (2*size*sizeof(MPI_Request)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_pt2pt_nb.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5213,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3fc1389e-d0fd-4cc0-843d-64aad6309adc",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_pt2pt_bl.cc"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 21,
                  "endLine": 205,
                  "endColumn": 39,
                  "charOffset": 6336,
                  "charLength": 18,
                  "snippet": {
                    "text": "malloc(buffersize)",
                    "rendered": {
                      "text": "malloc(buffersize)",
                      "markdown": "`malloc(buffersize)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_pt2pt_bl.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6336,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c7f2230d-a683-4b16-b467-0e65fa7ec41e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_pt2pt_nb_stress.cc"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 25,
                  "endLine": 154,
                  "endColumn": 77,
                  "charOffset": 5167,
                  "charLength": 52,
                  "snippet": {
                    "text": "malloc (2*size*NUM_NB_ITERATIONS*sizeof(MPI_Request)",
                    "rendered": {
                      "text": "malloc (2*size*NUM_NB_ITERATIONS*sizeof(MPI_Request)",
                      "markdown": "`malloc (2*size*NUM_NB_ITERATIONS*sizeof(MPI_Request)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_pt2pt_nb_stress.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5167,
                        "charLength": 52
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3462ca63-6a1d-4b44-80b6-6e9352e93c14",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_reduce_scatter.cc"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 25,
                  "endLine": 182,
                  "endColumn": 50,
                  "charOffset": 6187,
                  "charLength": 25,
                  "snippet": {
                    "text": "malloc(size * sizeof(int)",
                    "rendered": {
                      "text": "malloc(size * sizeof(int)",
                      "markdown": "`malloc(size * sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_reduce_scatter.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6187,
                        "charLength": 25
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7aa40d28-6d1f-49b8-b1c2-222d03f4f1e0",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_allgather.cc"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 20,
                  "endLine": 177,
                  "endColumn": 44,
                  "charOffset": 5683,
                  "charLength": 24,
                  "snippet": {
                    "text": "malloc(size *sizeof(int)",
                    "rendered": {
                      "text": "malloc(size *sizeof(int)",
                      "markdown": "`malloc(size *sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_allgather.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5683,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-97971cd8-0362-4e2a-b930-a8b19560b124",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_allgather.cc"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 20,
                  "endLine": 172,
                  "endColumn": 44,
                  "charOffset": 5507,
                  "charLength": 24,
                  "snippet": {
                    "text": "malloc(size *sizeof(int)",
                    "rendered": {
                      "text": "malloc(size *sizeof(int)",
                      "markdown": "`malloc(size *sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_allgather.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5507,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6dd47e86-b5f9-426b-bcb5-71ff21dfe808",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_scatter.cc"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 25,
                  "endLine": 176,
                  "endColumn": 50,
                  "charOffset": 5731,
                  "charLength": 25,
                  "snippet": {
                    "text": "malloc(size * sizeof(int)",
                    "rendered": {
                      "text": "malloc(size * sizeof(int)",
                      "markdown": "`malloc(size * sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_scatter.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5731,
                        "charLength": 25
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a4514811-b3ad-4a48-9d0e-519b492ab86a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_scatter.cc"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 25,
                  "endLine": 171,
                  "endColumn": 50,
                  "charOffset": 5549,
                  "charLength": 25,
                  "snippet": {
                    "text": "malloc(size * sizeof(int)",
                    "rendered": {
                      "text": "malloc(size * sizeof(int)",
                      "markdown": "`malloc(size * sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_scatter.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5549,
                        "charLength": 25
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-51feea4e-cda0-4ad0-8939-a19a2bc69f03",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_mpitest_buffer.h"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 33,
                  "endLine": 274,
                  "endColumn": 61,
                  "charOffset": 7541,
                  "charLength": 28,
                  "snippet": {
                    "text": "malloc (_elements * _extent)",
                    "rendered": {
                      "text": "malloc (_elements * _extent)",
                      "markdown": "`malloc (_elements * _extent)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_mpitest_buffer.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7541,
                        "charLength": 28
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c328149b-d380-4738-9b0b-277acc21a03b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_mpitest_buffer.h"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 33,
                  "endLine": 306,
                  "endColumn": 61,
                  "charOffset": 10680,
                  "charLength": 28,
                  "snippet": {
                    "text": "malloc (_elements * _extent)",
                    "rendered": {
                      "text": "malloc (_elements * _extent)",
                      "markdown": "`malloc (_elements * _extent)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_mpitest_buffer.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10680,
                        "charLength": 28
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-21f6e50e-3cd1-4692-b48a-fa26ecaee7ae",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_mpitest_buffer.h"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 1,
                  "endLine": 262,
                  "endColumn": 28,
                  "charOffset": 6787,
                  "charLength": 27,
                  "snippet": {
                    "text": "memcpy(dst, buffer, nBytes)",
                    "rendered": {
                      "text": "memcpy(dst, buffer, nBytes)",
                      "markdown": "`memcpy(dst, buffer, nBytes)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_mpitest_buffer.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6787,
                        "charLength": 27
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  buffer,  nBytes)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f82b226f-56c9-4f8c-93e9-1f4629d22519",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_mpitest_buffer.h"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 1,
                  "endLine": 257,
                  "endColumn": 28,
                  "charOffset": 6678,
                  "charLength": 27,
                  "snippet": {
                    "text": "memcpy(buffer, src, nBytes)",
                    "rendered": {
                      "text": "memcpy(buffer, src, nBytes)",
                      "markdown": "`memcpy(buffer, src, nBytes)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_mpitest_buffer.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6678,
                        "charLength": 27
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  src,  nBytes)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2240dc5b-9762-4ac5-94f1-6e4b12fa6810",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_mpitest_buffer.h"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 22,
                  "endLine": 241,
                  "endColumn": 37,
                  "charOffset": 6381,
                  "charLength": 15,
                  "snippet": {
                    "text": "malloc (nBytes)",
                    "rendered": {
                      "text": "malloc (nBytes)",
                      "markdown": "`malloc (nBytes)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_mpitest_buffer.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6381,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6a48a4c6-ee93-4020-8536-8ecb0b3ee1a4",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_mpitest_buffer.h"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 1,
                  "endLine": 232,
                  "endColumn": 41,
                  "charOffset": 6171,
                  "charLength": 40,
                  "snippet": {
                    "text": "strncpy (memname, \"hipHostRegister\", 32)",
                    "rendered": {
                      "text": "strncpy (memname, \"hipHostRegister\", 32)",
                      "markdown": "`strncpy (memname, \"hipHostRegister\", 32)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_mpitest_buffer.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6171,
                        "charLength": 40
                      },
                      "insertedContent": {
                        "text": "strcpy_s(memname,  32,  \"hipHostRegister\")"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_mpitest_buffer.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6171,
                        "charLength": 40
                      },
                      "insertedContent": {
                        "text": "strlcpy(memname,  \"hipHostRegister\",  32)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2fd19285-e0ab-4761-8460-da169155ffea",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_mpitest_buffer.h"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 1,
                  "endLine": 193,
                  "endColumn": 39,
                  "charOffset": 5230,
                  "charLength": 38,
                  "snippet": {
                    "text": "strncpy (memname, \"hipHostMalloc\", 32)",
                    "rendered": {
                      "text": "strncpy (memname, \"hipHostMalloc\", 32)",
                      "markdown": "`strncpy (memname, \"hipHostMalloc\", 32)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_mpitest_buffer.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5230,
                        "charLength": 38
                      },
                      "insertedContent": {
                        "text": "strcpy_s(memname,  32,  \"hipHostMalloc\")"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_mpitest_buffer.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5230,
                        "charLength": 38
                      },
                      "insertedContent": {
                        "text": "strlcpy(memname,  \"hipHostMalloc\",  32)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "glog-83755088-1d2d-40d5-b292-41442ca5514c",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_mpitest_buffer.h"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 1,
                  "endLine": 154,
                  "endColumn": 42,
                  "charOffset": 4289,
                  "charLength": 41,
                  "snippet": {
                    "text": "strncpy (memname, \"hipMallocManaged\", 32)",
                    "rendered": {
                      "text": "strncpy (memname, \"hipMallocManaged\", 32)",
                      "markdown": "`strncpy (memname, \"hipMallocManaged\", 32)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_mpitest_buffer.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4289,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "strcpy_s(memname,  32,  \"hipMallocManaged\")"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_mpitest_buffer.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4289,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "strlcpy(memname,  \"hipMallocManaged\",  32)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e4de1bc0-a041-454b-b0dc-01ea237ab20b",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_mpitest_buffer.h"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 1,
                  "endLine": 114,
                  "endColumn": 35,
                  "charOffset": 3369,
                  "charLength": 34,
                  "snippet": {
                    "text": "strncpy (memname, \"hipMalloc\", 32)",
                    "rendered": {
                      "text": "strncpy (memname, \"hipMalloc\", 32)",
                      "markdown": "`strncpy (memname, \"hipMalloc\", 32)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_mpitest_buffer.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3369,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "strcpy_s(memname,  32,  \"hipMalloc\")"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_mpitest_buffer.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3369,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "strlcpy(memname,  \"hipMalloc\",  32)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "glog-965479bc-43b4-48c1-a6a4-dc98fd4c2d54",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_mpitest_buffer.h"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 1,
                  "endLine": 99,
                  "endColumn": 28,
                  "charOffset": 3040,
                  "charLength": 27,
                  "snippet": {
                    "text": "memcpy(buffer, src, nBytes)",
                    "rendered": {
                      "text": "memcpy(buffer, src, nBytes)",
                      "markdown": "`memcpy(buffer, src, nBytes)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_mpitest_buffer.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3040,
                        "charLength": 27
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer, <size of buffer>,  src,  nBytes)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2983e4a8-4614-42f8-ae16-ab9ff9edac37",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_mpitest_buffer.h"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 23,
                  "endLine": 84,
                  "endColumn": 38,
                  "charOffset": 2802,
                  "charLength": 15,
                  "snippet": {
                    "text": "malloc (nBytes)",
                    "rendered": {
                      "text": "malloc (nBytes)",
                      "markdown": "`malloc (nBytes)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_mpitest_buffer.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2802,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a8797edd-4ae8-4692-a26b-7508ae83fe69",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_mpitest_buffer.h"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 1,
                  "endLine": 75,
                  "endColumn": 32,
                  "charOffset": 2599,
                  "charLength": 31,
                  "snippet": {
                    "text": "strncpy (memname, \"malloc\", 32)",
                    "rendered": {
                      "text": "strncpy (memname, \"malloc\", 32)",
                      "markdown": "`strncpy (memname, \"malloc\", 32)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_mpitest_buffer.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2599,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "strcpy_s(memname,  32,  \"malloc\")"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_mpitest_buffer.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2599,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "strlcpy(memname,  \"malloc\",  32)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1fe88271-cd87-4071-bff7-1b83c98a3812",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_file_read.cc"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 26,
                  "endLine": 194,
                  "endColumn": 63,
                  "charOffset": 5908,
                  "charLength": 37,
                  "snippet": {
                    "text": "malloc (NBLOCKS * sizeof(MPI_Request)",
                    "rendered": {
                      "text": "malloc (NBLOCKS * sizeof(MPI_Request)",
                      "markdown": "`malloc (NBLOCKS * sizeof(MPI_Request)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_file_read.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5908,
                        "charLength": 37
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e3b0d660-256b-43fc-bee2-2c935277c66a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_alltoall.cc"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 20,
                  "endLine": 182,
                  "endColumn": 44,
                  "charOffset": 5797,
                  "charLength": 24,
                  "snippet": {
                    "text": "malloc(size *sizeof(int)",
                    "rendered": {
                      "text": "malloc(size *sizeof(int)",
                      "markdown": "`malloc(size *sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_alltoall.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5797,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-63931f57-3acb-4c98-b753-f09cb2228081",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_alltoall.cc"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 20,
                  "endLine": 176,
                  "endColumn": 44,
                  "charOffset": 5609,
                  "charLength": 24,
                  "snippet": {
                    "text": "malloc(size *sizeof(int)",
                    "rendered": {
                      "text": "malloc(size *sizeof(int)",
                      "markdown": "`malloc(size *sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_alltoall.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5609,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5af94786-560d-45da-acbc-b6f6ed9d3437",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_mpitest_buffer.h"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 1,
                  "endLine": 104,
                  "endColumn": 28,
                  "charOffset": 3149,
                  "charLength": 27,
                  "snippet": {
                    "text": "memcpy(dst, buffer, nBytes)",
                    "rendered": {
                      "text": "memcpy(dst, buffer, nBytes)",
                      "markdown": "`memcpy(dst, buffer, nBytes)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_mpitest_buffer.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3149,
                        "charLength": 27
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  buffer,  nBytes)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7034108e-36ad-4da3-b7b4-9313eb3576c9",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_alltoall.cc"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 20,
                  "endLine": 170,
                  "endColumn": 44,
                  "charOffset": 5421,
                  "charLength": 24,
                  "snippet": {
                    "text": "malloc(size *sizeof(int)",
                    "rendered": {
                      "text": "malloc(size *sizeof(int)",
                      "markdown": "`malloc(size *sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_alltoall.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5421,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6b5ae1e1-c193-4fb2-adb3-cd921cfb6ba2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_alltoall.cc"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 20,
                  "endLine": 165,
                  "endColumn": 44,
                  "charOffset": 5250,
                  "charLength": 24,
                  "snippet": {
                    "text": "malloc(size *sizeof(int)",
                    "rendered": {
                      "text": "malloc(size *sizeof(int)",
                      "markdown": "`malloc(size *sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_alltoall.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5250,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-dfc749dd-c04c-4a4c-b1a5-86c07e8f5b82",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_sendtoself.cc"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 25,
                  "endLine": 146,
                  "endColumn": 54,
                  "charOffset": 4520,
                  "charLength": 29,
                  "snippet": {
                    "text": "malloc (2*sizeof(MPI_Request)",
                    "rendered": {
                      "text": "malloc (2*sizeof(MPI_Request)",
                      "markdown": "`malloc (2*sizeof(MPI_Request)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_sendtoself.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4520,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7117c26e-e082-4425-b0b4-ff4fa28268c8",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_osc_stress.cc"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 25,
                  "endLine": 153,
                  "endColumn": 75,
                  "charOffset": 5124,
                  "charLength": 50,
                  "snippet": {
                    "text": "malloc (size*NUM_NB_ITERATIONS*sizeof(MPI_Request)",
                    "rendered": {
                      "text": "malloc (size*NUM_NB_ITERATIONS*sizeof(MPI_Request)",
                      "markdown": "`malloc (size*NUM_NB_ITERATIONS*sizeof(MPI_Request)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_osc_stress.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5124,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c491b520-01e6-448b-b157-20c1fec5e0e2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/hip_mpitest_compute_kernel.cc"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 30,
                  "endLine": 77,
                  "endColumn": 63,
                  "charOffset": 2826,
                  "charLength": 33,
                  "snippet": {
                    "text": "malloc (params.N * sizeof(double)",
                    "rendered": {
                      "text": "malloc (params.N * sizeof(double)",
                      "markdown": "`malloc (params.N * sizeof(double)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "benchmarks/hip_mpitest_compute_kernel.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2826,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ac2dc4b9-cb89-42a5-ab4f-e59b847019be",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/hip_mpitest_compute_kernel.cc"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 28,
                  "endLine": 76,
                  "endColumn": 59,
                  "charOffset": 2762,
                  "charLength": 31,
                  "snippet": {
                    "text": "malloc (params.N * sizeof(long)",
                    "rendered": {
                      "text": "malloc (params.N * sizeof(long)",
                      "markdown": "`malloc (params.N * sizeof(long)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "benchmarks/hip_mpitest_compute_kernel.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2762,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-15fb1ec5-0bf9-4165-a71e-971d831f776b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/hip_file_write.cc"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 26,
                  "endLine": 169,
                  "endColumn": 63,
                  "charOffset": 5099,
                  "charLength": 37,
                  "snippet": {
                    "text": "malloc (NBLOCKS * sizeof(MPI_Request)",
                    "rendered": {
                      "text": "malloc (NBLOCKS * sizeof(MPI_Request)",
                      "markdown": "`malloc (NBLOCKS * sizeof(MPI_Request)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/hip_file_write.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5099,
                        "charLength": 37
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}